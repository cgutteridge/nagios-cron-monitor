#!/usr/bin/env perl

use Data::Dumper;

use strict;
use warnings;

sub CRITICAL { 2 }
sub WARNING { 1 } 
sub OK { 0 }
sub UNKNOWN { 3 }
sub IGNOREDMISSING { -1 }
sub IGNORED { -2 }

# read a directory full of timestamps compared with a directory full of configs
# should be passed options specifying a time-stamp dir and a config dir


# Config format. 
# UTF-8 assumed.
# Must have (WARNING: <time> and/or CRITCIAL: <time>) or an IGNORE statement. NAME is optional
# time age is a positive integer followed by s, m, h, d, w

# CRITICAL: 10m
# WARNING: 3h
# IGNORE
# NAME: Update users nightly
# HOURS: 10,1-4

# Final status is the worst of all results. All per-file issues also reported to stderr.

# OVERALL CASES
# CRITICAL incorrect options 
# CRITICAL either directory does not exist
# CRITICAL either directory not readable
#  WARNING either directory contains no files

my $issues = [];

if( scalar @ARGV != 2 ) {
	exitOutcome( CRITICAL, "[sys] Command expects two directories to be specified" );
}	

my( $tdir, $cdir ) = @ARGV;
if( !-d $tdir ) { 
	exitOutcome( CRITICAL, "[sys] Timestamp directory '$tdir' is not a directory" );
}	
if( !-d $cdir ) { 
	exitOutcome( CRITICAL, "[sys] Config directory '$cdir' is not a directory" );
}	
if( !-r $tdir ) { 
	exitOutcome( CRITICAL, "[sys] Timestamp directory '$tdir' is not readable" );
}	
if( !-r $cdir ) { 
	exitOutcome( CRITICAL, "[sys] Config directory '$cdir' is not readable" );
}	


# PER TIMESTAMP CASES
#       OK config file exists, timestamp in OK range
#  WARNING timestamp exists, no config file
#  WARNING config file is unreadable 
#  WARNING syntax error in config file
#  WARNING config file exists, no timestamp
#  WARNING config file exists, timestamp aged enough for warning
# CRITICAL config file exists, timestamp aged enough for critical



my $dh;
# Read modification times of timestamps
my $ages = {};
opendir( $dh, $tdir );
while( my $file = readdir( $dh ) ) {
	my $full_file = $tdir . "/". $file;

	next if( ! -f $full_file );

	$ages->{$file} = time() - mtime( $full_file );
}
closedir($dh);

my $configs = {};
opendir( $dh, $cdir );
while( my $file = readdir( $dh ) ) {
	my $full_file = $cdir . "/". $file;

	next if( !-f $full_file );

	if( !-r $full_file ) {
		push @$issues, { file=>$file, code=>WARNING, message=>"Could not read $full_file" };
		next;
	}

	my $config = readConfig( $full_file );
	if( !defined $config ) {
		push @$issues, { file=>$file, code=>WARNING, message=>"Could not parse '$file' config" };
		next;
	}

	$configs->{$file} = $config;
}
closedir($dh);

my $ok = 0;
foreach my $file ( keys %$ages ) {
	if( ! defined $configs->{$file} ) {
		push @$issues, { file=>$file, code=>WARNING, message=>"No config file for timestamp '$file'" };
		next;
	}
	my $config = $configs->{$file};
	delete $configs->{$file};
	my $age = $ages->{$file};
	if( defined $config->{IGNORE} ) {
		# don't actually check timestamps marked IGNORE
		push @$issues, { file=>$file, code=>IGNORED };
		next;
	}

	my $name = $file;
	if( defined $config->{NAME} ) {
		$name = $config->{NAME};
	}

	# If "hours" have been set, and the age is less than the end of the most recent h
	if( defined $config->{CRITICAL} && $config->{CRITICAL} < $age ) {
		push @$issues, { file=>$file, code=>CRITICAL, message=>"$name has not updated for ".(timeDescription($age))." (CRITICAL at ".(timeDescription($config->{CRITICAL})).")" };
		next;
	}
	if( defined $config->{WARNING} && $config->{WARNING} < $age ) {
		push @$issues, { file=>$file, code=>WARNING, message=>"$name has not updated for ".(timeDescription($age))." (WARNING at ".(timeDescription($config->{WARNING})).")" };
		next;
	}

	$ok++;
}
# only configs left are those without a matching timestamp
foreach my $file ( keys %$configs ) {
	my $config = $configs->{$file};
	if( defined $config->{"IGNORE"} ) {
		push @$issues, { file=>$file, code=>IGNORED };
	} elsif( defined $config->{"IGNORE-NO-TIMESTAMP"} ) {
		push @$issues, { file=>$file, code=>IGNOREDMISSING, message=>"No timestamp file for config '$file' (ignored)" };
	} else {
		push @$issues, { file=>$file, code=>WARNING, message=>"No timestamp file for config '$file'" };
	}
}

my $worst = { code=>OK, message=>"Checked $ok timestamps" };
my $counts = { IGNORED=>0, IGNOREDMISSING=>0, OK=>0, WARNING=>0, CRITICAL=>0, UNKNOWN=>0, };

foreach my $issue ( @$issues ) {
	if( defined $issue->{message} ) {
		print STDERR codeLabel( $issue->{code} ).": ".$issue->{message}."\n";
	}
	$counts->{$issue->{code}}++;	
	if( $issue->{code} > $worst->{code} ) {
		$worst = $issue;
	}
}
my $extra = "";
if( $counts->{UNKNOWN} > 0 ) { $extra .= ", ".$counts->{UNKNOWN}." UNKNOWN"; }
if( $counts->{CRITICAL} > 0 ) { $extra .= ", ".$counts->{CRITICAL}." CRITICAL"; }
if( $counts->{WARNING} > 0 ) { $extra .= ", ".$counts->{WARNING}." WARNING"; }
if( $counts->{IGNOREDMISSING} > 0 ) { $extra .= ", ".$counts->{IGNOREDMISSING}." MISSING BUT IGNORED"; }
if( $counts->{IGNORED} > 0 ) { $extra .= ", ".$counts->{IGNORED}." IGNORED"; }

exitOutcome( $worst->{code}, $worst->{message}.$extra );

exit 0;

sub readConfig
{
	my( $filename ) = @_;

	my $config = {};
	open( my $fh, "<:utf8", $filename );
	my @lines = <$fh>;
	close( $fh );

	my $line_number = 0;	
	foreach my $line ( @lines ) {
		$line_number++;

		# remove whitespace and comments
		chomp $line;
		$line =~ s/^\s+//;
		$line =~ s/\s+$//;
		$line =~ s/\s*#.*$//;
		next if( $line eq "" );

		my $parsed = $line =~ m/^([-A-Z]+)\s*(:\s*(.*))?$/;
		if( !$parsed ) {
			print STDERR "Could not parse line $line_number of $filename.\n";
			return undef;
		}

		my( $term, $value ) = ( $1, $3 );
		# validate line
		if( $term eq "IGNORE" || $term eq "IGNORE-NO-TIMESTAMP" ) {
			if( defined $value ) {
				# not really a problem so warn to stderr but move on
				print STDERR "IGNORE does not require a value at line $line_number of $filename.\n";
			}
			$value = 1;
		} elsif( $term eq "NAME" ) { 
			if( !defined $value ) {
				print STDERR "NAME requires a value at line $line_number of $filename.\n";
				return undef;
			}
		} elsif( $term eq "WARNING" || $term eq "CRITICAL" ) {
			if( !defined $value ) {
				print STDERR "$term requires a value at line $line_number of $filename.\n";
				return undef;
			}
			my $seconds = parseTime( $value );
			if( !defined $seconds ) {
				print STDERR "$term has invalid time value at line $line_number of $filename.\n";
				return undef;
			}
			$value = $seconds;
		} elsif( $term eq "HOURS" ) {
			if( !defined $value ) {
				print STDERR "$term requires a value at line $line_number of $filename.\n";
				return undef;
			}
			my $hours = parseHours( $value );
			if( !defined $hours ) {
				print STDERR "$term has invalid hours value at line $line_number of $filename.\n";
				return undef;
			}
			$value = $hours;
		} else {
			# not actually a problem so warn to stderr but move on
			print STDERR "Unknown term $term at line $line_number of $filename.\n";
			return undef;
		}
		$config->{$term} = $value;
	}
#print Dumper( $config );
	return $config;
}	

sub parseHours 
{
	my( $string ) = @_;

	my $hours = {};
	my @bits = split( /\s*,\s*/, $string );
	foreach my $bit ( @bits ) {
		# each bit should be a number or number-numbers
		$bit =~ s/\s//g;
		if( $bit=~/^\d+$/ ) {
			if( $bit > 23 ) {
				print STDERR "$bit is too big for an hour.\n";
				return undef;
			}
			$hours->{$bit} = 1;
			next;
		}
		if( $bit=~/^(\d+)-(\d+)$/ ) {
			my $from = $1;
			my $to = $2;
			if( $from > 23 ) {
				print STDERR "$bit is too big for an hour.\n";
				return undef;
			}
			if( $to > 23 ) {
				print STDERR "$bit is too big for an hour.\n";
				return undef;
			}
			if( $to < $from ) {
				print STDERR "$bit range has end lower than start.\n";
				return undef;
			}
			for( my $i=$from; $i<=$to; ++$i ) {
				$hours->{$i} = 1;
			}
			next;
		}
		print STDERR "$bit isn't a valid hour or range.\n";
		return undef;
	}

	return [ sort keys %{$hours} ];
}

sub parseTime 
{
	my( $string ) = @_;

	my $match = $string=~m/^(\d+)\s*([smhdw])$/;
	if( !$match ) { 
		return undef;
	}

	my( $number, $units ) = ( $1, $2 );

	my $factor;
	$factor->{s} = 1;
	$factor->{m} = $factor->{s}*60;
	$factor->{h} = $factor->{m}*60;
	$factor->{d} = $factor->{h}*24;
	$factor->{w} = $factor->{d}*7;

	return $number * $factor->{$units};
}

sub timeDescription
{
	my( $seconds ) = @_;

	return $seconds." secs" if( $seconds < 60*3 );
	my $minutes = int $seconds/60;
	return $minutes." mins" if( $minutes < 60*3 );
	my $hours = int $minutes/60;
	return $hours." hrs" if( $hours < 24*3 );
	my $days = int $hours/24;
	return $days." days";
}


sub exitOutcome
{
	my( $code, $message ) = @_;

	my $label = codeLabel( $code );
	if( !defined $label ) {
		$label = "UNKNOWN";
		$code = 3;
		$message = "Bad code passed to exitOutcome()";
	}

	print "$label: $message\n";
	exit( $code );
}

sub mtime
{
	my( $filename ) = @_;

	my @s = stat($filename);
	return $s[9];
}

sub codeLabel { 
	my( $code ) = @_;

	return "OK" if( $code eq OK );
	return "WARNING" if( $code eq WARNING );
	return "CRITICAL" if( $code eq CRITICAL );
	return "UNKNOWN" if( $code eq UNKNOWN );
	return "IGNORED" if( $code eq IGNORED );
	return "IGNORED-MISSING" if( $code eq IGNOREDMISSING );
	return undef;
}

